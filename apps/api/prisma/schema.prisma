// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Optional profile information
  name      String?
  phone     String?
  verified  Boolean  @default(false)

  // Relations
  ownedBusinesses Business[]
  validations     Validation[]
  claims          BusinessClaim[]

  @@map("users")
}

model Business {
  id          String      @id @default(cuid())
  name        String
  description String?
  category    Category
  verified    Boolean     @default(false)
  active      Boolean     @default(true)
  
  // Location
  city        String
  address     String?
  latitude    Float?
  longitude   Float?
  
  // Contact information
  phone       String?
  email       String?
  whatsapp    String?
  website     String?
  
  // External IDs
  googlePlaceId String?
  
  // Ownership
  ownerId     String?
  owner       User?       @relation(fields: [ownerId], references: [id])
  
  // Timestamps
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  claimedAt   DateTime?
  
  // Relations
  validations Validation[]
  promoCodes  PromoCode[]
  claims      BusinessClaim[]

  @@index([category])
  @@index([city])
  @@index([verified])
  @@index([active])
  @@index([createdAt])
  @@map("businesses")
}

model Validation {
  id         String         @id @default(cuid())
  type       ValidationType
  isCorrect  Boolean
  comment    String?
  
  // Relations
  businessId String
  business   Business       @relation(fields: [businessId], references: [id], onDelete: Cascade)
  userId     String?
  user       User?          @relation(fields: [userId], references: [id])
  
  // Metadata
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime       @default(now())

  @@index([businessId])
  @@index([type])
  @@index([createdAt])
  @@map("validations")
}

model PromoCode {
  id          String    @id @default(cuid())
  code        String    @unique
  description String
  discount    String    // e.g., "20%", "$50", "Free upgrade"
  validUntil  DateTime?
  active      Boolean   @default(true)
  usageCount  Int       @default(0)
  maxUsage    Int?
  
  // Relations
  businessId  String
  business    Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([businessId])
  @@index([active])
  @@index([validUntil])
  @@map("promo_codes")
}

model BusinessClaim {
  id               String            @id @default(cuid())
  status           ClaimStatus       @default(PENDING)
  verificationType VerificationType
  contactValue     String            // Email or phone number for verification
  verificationCode String?           // 6-digit code for verification
  codeExpiresAt    DateTime?         // Expiration time for verification code
  claimReason      String?           // Optional reason for claim
  adminNotes       String?           // Notes from admin review
  
  // Relations
  businessId       String
  business         Business          @relation(fields: [businessId], references: [id], onDelete: Cascade)
  userId           String
  user             User              @relation(fields: [userId], references: [id])
  
  // Metadata
  ipAddress        String?
  userAgent        String?
  
  // Timestamps
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  verifiedAt       DateTime?         // When claim was verified
  approvedAt       DateTime?         // When claim was approved by admin/system

  @@index([businessId])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@unique([businessId, userId]) // Prevent duplicate claims from same user
  @@map("business_claims")
}

enum ClaimStatus {
  PENDING      // Initial state, waiting for verification
  VERIFIED     // Contact verified, but pending approval
  APPROVED     // Claim approved, user is now owner
  REJECTED     // Claim rejected by admin
  EXPIRED      // Verification code expired
  CANCELLED    // User cancelled the claim
}

enum VerificationType {
  EMAIL
  SMS
  PHONE_CALL
}

enum Category {
  HOTEL
  TOUR
  TRANSPORT
  RESTAURANT
  ATTRACTION
  OTHER
}

enum ValidationType {
  PHONE_WORKS
  PHONE_INCORRECT
  EMAIL_WORKS
  EMAIL_INCORRECT
  WHATSAPP_WORKS
  WHATSAPP_INCORRECT
  GENERAL_CORRECT
  GENERAL_INCORRECT
}

