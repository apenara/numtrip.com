// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums matching Supabase
enum BusinessCategory {
  HOTEL
  RESTAURANT
  TOUR
  TRANSPORT
  ATTRACTION
  OTHER
  
  @@map("business_category")
}

enum ContactType {
  PHONE
  EMAIL
  WHATSAPP
  WEBSITE
  
  @@map("contact_type")
}

enum ValidationStatus {
  PENDING
  APPROVED
  REJECTED
  
  @@map("validation_status")
}

enum ClaimStatus {
  PENDING
  VERIFIED
  REJECTED
  
  @@map("claim_status")
}

model City {
  id         String     @id @default(uuid()) @db.Uuid
  name       String
  country    String
  latitude   Decimal?   @db.Decimal(10, 8)
  longitude  Decimal?   @db.Decimal(11, 8)
  createdAt  DateTime   @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  
  // Relations
  businesses Business[]
  
  @@map("cities")
}

model Business {
  id            String           @id @default(uuid()) @db.Uuid
  name          String
  description   String?
  category      BusinessCategory @default(OTHER)
  address       String?
  cityId        String?          @map("city_id") @db.Uuid
  latitude      Decimal?         @db.Decimal(10, 8)
  longitude     Decimal?         @db.Decimal(11, 8)
  googlePlaceId String?          @unique @map("google_place_id")
  website       String?
  verified      Boolean          @default(false)
  claimed       Boolean          @default(false)
  ownerId       String?          @map("owner_id") @db.Uuid
  createdAt     DateTime         @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  
  // Relations
  city          City?            @relation(fields: [cityId], references: [id])
  contacts      Contact[]
  validations   Validation[]
  claims        BusinessClaim[]
  
  @@index([category])
  @@index([cityId])
  @@index([verified])
  @@index([claimed])
  @@map("businesses")
}

model Contact {
  id             String      @id @default(uuid()) @db.Uuid
  businessId     String      @map("business_id") @db.Uuid
  type           ContactType
  value          String
  verified       Boolean     @default(false)
  primaryContact Boolean     @default(false) @map("primary_contact")
  createdAt      DateTime    @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  
  // Relations
  business       Business    @relation(fields: [businessId], references: [id], onDelete: Cascade)
  validations    Validation[]
  
  @@index([businessId])
  @@index([type])
  @@index([verified])
  @@map("contacts")
}

model Validation {
  id         String           @id @default(uuid()) @db.Uuid
  businessId String           @map("business_id") @db.Uuid
  contactId  String?          @map("contact_id") @db.Uuid
  validatorId String?         @map("validator_id") @db.Uuid
  status     ValidationStatus @default(PENDING)
  isCorrect  Boolean?         @map("is_correct")
  comment    String?
  createdAt  DateTime         @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  
  // Relations
  business   Business         @relation(fields: [businessId], references: [id], onDelete: Cascade)
  contact    Contact?         @relation(fields: [contactId], references: [id], onDelete: Cascade)
  
  @@index([businessId])
  @@index([status])
  @@map("validations")
}

model BusinessClaim {
  id                   String      @id @default(uuid()) @db.Uuid
  businessId           String      @map("business_id") @db.Uuid
  claimantId           String      @map("claimant_id") @db.Uuid
  status               ClaimStatus @default(PENDING)
  verificationMethod   String?     @map("verification_method")
  verificationToken    String?     @map("verification_token")
  verificationExpiresAt DateTime?  @map("verification_expires_at") @db.Timestamptz
  verifiedAt           DateTime?   @map("verified_at") @db.Timestamptz
  createdAt            DateTime    @default(now()) @map("created_at") @db.Timestamptz
  updatedAt            DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  
  // Relations
  business             Business    @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  @@index([businessId])
  @@index([status])
  @@map("business_claims")
}

model Profile {
  id        String   @id @db.Uuid
  email     String?
  name      String?
  phone     String?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  
  @@map("profiles")
}

// Note: Users are managed by Supabase Auth (auth.users table)
// The Profile model syncs with auth.users via trigger